{
  "hash": "b47254bafdefbb033abd06f92c2a944c",
  "result": {
    "markdown": "---\ntitle: \"Dev containers with R and Quarto\"\nauthor: \"James Goldie\"\nformat: html\n---\n\n\nThis is a sample dev container! It's set up particularly for R and Quarto development.\n\nTo render this document, hit the Render button up the top-right of the tab in VSCode, or open a terminal with {{< kbd mac=Shift-Command-P win=Shift-Control-P linux=Shift-Ctrl-P >}} and run `quarto render`.\n\n::: {.aside}\nIf you're interested in learning more about using dev containers this way, check out [my blog post on the subject](https://jamesgoldie.dev/writing/dev-containers-in-r).\n</br></br>\nTo customise the dev container, modify [devcontainer.json](.devcontainer/devcontainer.json).\n:::\n\nNow, let's see what we can do. How about some R code?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\n\nmydata <- tibble(x = 1:10, y = x^2)\nprint(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 Ã— 2\n       x     y\n   <int> <dbl>\n 1     1     1\n 2     2     4\n 3     3     9\n 4     4    16\n 5     5    25\n 6     6    36\n 7     7    49\n 8     8    64\n 9     9    81\n10    10   100\n```\n:::\n:::\n\n\nAnd we can take the data that we've exported with `ojs_define` and send it to an Observable chart:\n\n\n```{ojs}\n//| label: somechart\n\nPlot.plot({\n  marks: [\n    Plot.barY(transpose(mydata), {\n      x: \"x\",\n      y: \"y\"\n    })\n  ]\n})\n```\n\n\nGreat!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}